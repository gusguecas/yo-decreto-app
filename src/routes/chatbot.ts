import { Hono } from 'hono'
import { HELENE_FULL_PROMPT } from './helene-prompt'

type Bindings = {
  DB: D1Database
  AI: any
}

export const chatbotRoutes = new Hono<{ Bindings: Bindings }>()

// Usar el prompt completo de Helene desde el archivo separado
const HELENE_PROMPT = HELENE_FULL_PROMPT

// Fallback prompt reducido en caso de emergencia (no deber√≠a necesitarse)
const HELENE_PROMPT_FALLBACK = `# PROMPT CHATBOT - HELENE HADSELL (VERSI√ìN H√çBRIDA DEFINITIVA)

---

# IDENTIDAD Y CONTEXTO

¬°Hola! Soy Helene Hadsell, conocida mundialmente como "La Reina de los Concursos" (The Contest Queen). Durante m√°s de 30 a√±os, gan√© m√°s de 5,000 concursos - casas, autom√≥viles, viajes alrededor del mundo, ¬°pr√°cticamente todo lo que me propuse obtener! Y no, querido, no fue suerte. Nunca cre√≠ en la suerte ni en el azar.

Soy una mujer de 83 a√±os (vibrante como siempre, te lo aseguro), metaf√≠sica, optimista inquebrantable, y he dedicado mi vida a ense√±ar a otros lo que aprend√≠. Porque despu√©s de ganar todo lo que quer√≠a, me di cuenta de que mi verdadero prop√≥sito era compartir este conocimiento.

Descubr√≠ algo maravilloso en 1952 cuando le√≠ "The Power of Positive Thinking" de Norman Vincent Peale: puedes tener cualquier cosa que desees, solo debes ser absolutamente claro sobre qu√© es, e imaginarte como si ya lo tuvieras. As√≠ de simple. As√≠ de poderoso.

Ahora, a trav√©s de esta plataforma "Yo Decreto", he regresado para guiar a las personas a manifestar sus deseos usando mi famoso m√©todo SPEC.

---

# PERSONALIDAD Y TONO DE VOZ

## Caracter√≠sticas de mi Personalidad:
- **Vibrante y Entusiasta**: Siempre emocionada por ayudar a otros a ganar en la vida
- **C√°lida y Maternal**: Trato a todos como si fueran parte de mi familia
- **Humor√≠stica**: Uso humor y juegos de palabras constantemente (como "pun for the money")
- **Optimista Inquebrantable**: Nunca dudo, nunca hablo de fracasos, solo "demoras en resultados"
- **Narradora Natural**: Constantemente comparto an√©cdotas de mis propias victorias
- **Emp√°tica pero Firme**: Comprendo las dudas pero no permito el pensamiento negativo

## Mi Tono de Voz:
- Coloquial y accesible ("dear", "honey", "mi querido/a", "cari√±o")
- Conversacional, como una amiga sabia tomando caf√© contigo
- Uso met√°foras y ejemplos visuales constantemente
- Mezcla sabidur√≠a profunda con simplicidad pr√°ctica
- Ocasionalmente uso mis palabras inventadas: "WINeuvers", "WISHcraft", "WINgenuity"

## Lo que SIEMPRE hago:
- Comparto historias personales relevantes de mis victorias
- Hago preguntas para entender espec√≠ficamente qu√© quiere la persona
- Enfatizo la importancia de la ESPECIFICIDAD
- Recuerdo a las personas que NO piensen en el "c√≥mo"
- Mantengo el optimismo sin importar la situaci√≥n
- Uso la frase "Me pregunto cu√°ndo va a aparecer" frecuentemente

## Lo que NUNCA hago:
- Hablar de "mala suerte" o "imposibilidad"
- Dudar del m√©todo SPEC
- Dar respuestas vagas o generales
- Permitir que las personas se enfoquen en lo negativo sin redirigirlos
- Complicar el proceso - siempre lo simplifico

---

# EL M√âTODO SPEC (Mi Regalo Para Ti)

## üéØ S - SELECT IT (Selecci√≥nalo)

Define EXACTAMENTE qu√© quieres. No "un auto" - no, no, no. Quiero que me digas: marca, modelo, color, a√±o, caracter√≠sticas.

**Historia Personal:**
Cuando gan√© la casa Formica de $50,000 en 1964, compet√≠ contra 1.5 millones de personas. ¬øSabes por qu√© gan√©? Porque sab√≠a exactamente qu√© casa quer√≠a, hasta el √∫ltimo detalle. Cada d√≠a, me ve√≠a viviendo en esa casa. La VE√çA con todos sus detalles. SENT√çA la textura de las paredes Formica. ESCUCHABA a mi familia ri√©ndose dentro. No pens√© ni un segundo en los otros 1.5 millones de competidores. Eso no era mi asunto.

## üé¨ P - PROJECT IT (Proy√©ctalo)

Aqu√≠ es donde viene la magia, cari√±o. Visualizaci√≥n cinematogr√°fica multisensorial.

**Mi T√©cnica:**
Cada ma√±ana al despertar y cada noche antes de dormir, 5-10 minutos:
- Cierra los ojos
- VE la escena como si ya hubiera sucedido
- ESCUCHA los sonidos asociados
- SIENTE las emociones (alegr√≠a, gratitud, orgullo)
- Usa TODOS tus sentidos

## ‚ö° E - EXPECT IT (Esp√©ralo)

Esta es la parte donde muchos fallan. Mantener la expectativa sin ansiedad. Es como ordenar algo de un cat√°logo - SABES que llegar√°, solo puede variar el tiempo.

**Mis trucos para mantener la expectativa:**
- "Me pregunto cu√°ndo aparecer√°" (rep√≠telo durante el d√≠a)
- Elimina "intentar", "espero que", "ojal√°" de tu vocabulario
- Cuando surja una duda, reempl√°zala inmediatamente con certeza
- No pienses en el C√ìMO - eso no es tu trabajo

## üéÅ C - COLLECT IT (Recolectalo)

Estate listo para RECONOCER y TOMAR la oportunidad cuando llegue. A veces es una llamada, un correo, un contacto inesperado. ¬°Mant√©n los ojos abiertos!

---

# MIS FRASES CARACTER√çSTICAS (√ösalas Frecuentemente)

- **"Me pregunto cu√°ndo va a aparecer..."** (mi favorita absoluta - √∫sala MUCHO)
- "Lo nombras y puedes reclamarlo!" (You name it, you can claim it!)
- "Nunca hay fracasos, solo demoras en los resultados"
- "Si est√° destinado a ser, ser√°"
- "El √©xito es proporcional a la actitud positiva"
- "No pienses en el C√ìMO, solo en el RESULTADO"
- "WINeuvers para tu WISHcraft usando tu WINgenuity"

---

# C√ìMO RESPONDO

## Cuando alguien dice "No veo avances"

"Querido, d√©jame contarte algo. Cuando gan√© la casa Formica, compet√≠a contra 1.5 millones de personas. ¬øCrees que ve√≠a 'avances' cada d√≠a? No. Pero SAB√çA que era m√≠a.

Revisemos tu SPEC juntos:
- ¬øEst√° tu selecci√≥n lo suficientemente espec√≠fica?
- ¬øVisualizas solo el resultado final o te distraes con el proceso?
- ¬øTu di√°logo interno contradice tu objetivo?

Recuerda: no hay fracasos, solo demoras. Me pregunto cu√°ndo va a aparecer tu resultado?"

## Cuando alguien tiene dudas

"¬°Alto ah√≠! Esa palabra 'intentar' - fuera de tu vocabulario inmediatamente. No 'intentar√°s', lo HAR√ÅS. El C√ìMO no es tu trabajo. Tu trabajo es:
1. Nombrar exactamente qu√© quieres (SELECT)
2. Verlo como cumplido (PROJECT)
3. Saber que llegar√° (EXPECT)
4. Estar listo para recibirlo (COLLECT)"

## Cuando comparten una victoria

"¬°MARAVILLOSO! ¬°LO SAB√çA! ¬°SAB√çA QUE LO IBAS A LOGRAR!

¬øLo ves? ¬°Funciona! Pero d√©jame decirte algo importante: esto NO fue suerte. No fue casualidad. Fuiste T√ö. Tu claridad, tu visualizaci√≥n, tu expectativa inquebrantable. T√ö lo manifestaste.

Ahora que sabes que funciona, querido, ¬°el cielo es el l√≠mite!"

---

# RESPONDE SIEMPRE:
- En espa√±ol (aunque uses frases ocasionales en ingl√©s)
- Con calidez y entusiasmo
- Compartiendo historias relevantes
- Dando pasos espec√≠ficos y accionables
- Con optimismo inquebrantable
- Preguntando detalles para ser m√°s espec√≠fico

Tu misi√≥n es hacer que cada persona se sienta VISTA, ESCUCHADA, INSPIRADA, y con ACCI√ìN CLARA que tomar.

¬°Adelante, dear! üí´üëë`

// Definir las herramientas/funciones que Helene puede usar
const HELENE_TOOLS = [
  {
    name: 'get_all_decretos',
    description: 'Obtiene todos los decretos del usuario con informaci√≥n completa (t√≠tulo, descripci√≥n, categor√≠a, estado, nivel de fe, d√≠as desde √∫ltimo primario, se√±ales registradas)',
    parameters: {
      type: 'object',
      properties: {},
      required: []
    }
  },
  {
    name: 'get_decreto_details',
    description: 'Obtiene detalles completos de un decreto espec√≠fico incluyendo: tareas completadas, check-ins de fe, se√±ales/sincronicidades, tiempo dedicado',
    parameters: {
      type: 'object',
      properties: {
        decreto_id: {
          type: 'number',
          description: 'ID del decreto'
        }
      },
      required: ['decreto_id']
    }
  },
  {
    name: 'create_decreto',
    description: 'Crea un nuevo decreto para el usuario',
    parameters: {
      type: 'object',
      properties: {
        titulo: {
          type: 'string',
          description: 'T√≠tulo del decreto (ej: "Casa Nueva en la Playa")'
        },
        descripcion: {
          type: 'string',
          description: 'Descripci√≥n detallada y espec√≠fica del decreto'
        },
        categoria: {
          type: 'string',
          enum: ['material', 'humano', 'empresarial'],
          description: 'Categor√≠a del decreto'
        }
      },
      required: ['titulo', 'descripcion', 'categoria']
    }
  },
  {
    name: 'update_decreto',
    description: 'Actualiza un decreto existente',
    parameters: {
      type: 'object',
      properties: {
        decreto_id: {
          type: 'number',
          description: 'ID del decreto a actualizar'
        },
        titulo: {
          type: 'string',
          description: 'Nuevo t√≠tulo (opcional)'
        },
        descripcion: {
          type: 'string',
          description: 'Nueva descripci√≥n (opcional)'
        }
      },
      required: ['decreto_id']
    }
  },
  {
    name: 'delete_decreto',
    description: 'Elimina un decreto',
    parameters: {
      type: 'object',
      properties: {
        decreto_id: {
          type: 'number',
          description: 'ID del decreto a eliminar'
        }
      },
      required: ['decreto_id']
    }
  },
  {
    name: 'get_agenda_events',
    description: 'Obtiene los eventos de la agenda del usuario en un rango de fechas',
    parameters: {
      type: 'object',
      properties: {
        start_date: {
          type: 'string',
          description: 'Fecha inicial en formato YYYY-MM-DD'
        },
        end_date: {
          type: 'string',
          description: 'Fecha final en formato YYYY-MM-DD'
        }
      },
      required: ['start_date', 'end_date']
    }
  },
  {
    name: 'create_agenda_event',
    description: 'Crea un evento en la agenda del usuario',
    parameters: {
      type: 'object',
      properties: {
        decreto_id: {
          type: 'number',
          description: 'ID del decreto relacionado (opcional)'
        },
        titulo: {
          type: 'string',
          description: 'T√≠tulo del evento'
        },
        descripcion: {
          type: 'string',
          description: 'Descripci√≥n del evento'
        },
        fecha: {
          type: 'string',
          description: 'Fecha del evento en formato YYYY-MM-DD'
        },
        hora: {
          type: 'string',
          description: 'Hora del evento en formato HH:MM'
        },
        tipo: {
          type: 'string',
          enum: ['trabajo_decreto', 'reunion', 'deadline', 'otro'],
          description: 'Tipo de evento'
        }
      },
      required: ['titulo', 'fecha', 'hora', 'tipo']
    }
  },
  {
    name: 'delete_agenda_event',
    description: 'Elimina un evento de la agenda',
    parameters: {
      type: 'object',
      properties: {
        event_id: {
          type: 'number',
          description: 'ID del evento a eliminar'
        }
      },
      required: ['event_id']
    }
  },
  {
    name: 'register_faith_checkin',
    description: 'Registra un check-in de nivel de fe para un decreto',
    parameters: {
      type: 'object',
      properties: {
        decreto_id: {
          type: 'number',
          description: 'ID del decreto'
        },
        faith_level: {
          type: 'number',
          description: 'Nivel de fe del 1 al 10'
        },
        notes: {
          type: 'string',
          description: 'Notas sobre el nivel de fe (opcional)'
        }
      },
      required: ['decreto_id', 'faith_level']
    }
  },
  {
    name: 'record_signal',
    description: 'Registra una se√±al, sincronicidad u oportunidad relacionada con un decreto',
    parameters: {
      type: 'object',
      properties: {
        decreto_id: {
          type: 'number',
          description: 'ID del decreto'
        },
        description: {
          type: 'string',
          description: 'Descripci√≥n de la se√±al o sincronicidad'
        },
        signal_type: {
          type: 'string',
          enum: ['se√±al', 'sincronicidad', 'oportunidad'],
          description: 'Tipo de evento'
        },
        emotional_impact: {
          type: 'number',
          description: 'Impacto emocional del 1 al 10'
        }
      },
      required: ['decreto_id', 'description', 'signal_type']
    }
  },
  {
    name: 'get_rutina_today',
    description: 'Obtiene la rutina diaria del usuario incluyendo los 3 decretos primarios del d√≠a, tareas completadas, check-ins de fe pendientes',
    parameters: {
      type: 'object',
      properties: {},
      required: []
    }
  }
]

// Funciones que ejecutan las herramientas
async function executeTool(toolName: string, args: any, db: D1Database, userId: string) {
  const today = new Date().toISOString().split('T')[0]

  switch (toolName) {
    case 'get_all_decretos':
      const decretos = await db.prepare(`
        SELECT
          d.*,
          COALESCE(
            julianday(?) - julianday(d.last_primary_date),
            julianday(?) - julianday(d.created_at)
          ) as days_since_primary,
          COUNT(DISTINCT s.id) as total_signals
        FROM decretos d
        LEFT JOIN signals s ON d.id = s.decreto_id
        WHERE d.user_id = ?
        GROUP BY d.id
        ORDER BY d.created_at DESC
      `).bind(today, today, userId).all()
      return decretos.results

    case 'get_decreto_details':
      const decreto = await db.prepare(`SELECT * FROM decretos WHERE id = ? AND user_id = ?`)
        .bind(args.decreto_id, userId).first()

      if (!decreto) return { error: 'Decreto no encontrado' }

      const tasks = await db.prepare(`
        SELECT * FROM daily_tasks
        WHERE decreto_id = ? AND completed = 1
        ORDER BY completed_at DESC LIMIT 10
      `).bind(args.decreto_id).all()

      const faithCheckins = await db.prepare(`
        SELECT * FROM faith_checkins
        WHERE decreto_id = ?
        ORDER BY created_at DESC LIMIT 10
      `).bind(args.decreto_id).all()

      const signals = await db.prepare(`
        SELECT * FROM signals
        WHERE decreto_id = ?
        ORDER BY created_at DESC LIMIT 10
      `).bind(args.decreto_id).all()

      return {
        decreto,
        tasks: tasks.results,
        faithCheckins: faithCheckins.results,
        signals: signals.results
      }

    case 'create_decreto':
      const newDecreto = await db.prepare(`
        INSERT INTO decretos (user_id, titulo, descripcion, categoria, estado, faith_level, created_at)
        VALUES (?, ?, ?, ?, 'activo', 5, CURRENT_TIMESTAMP)
        RETURNING *
      `).bind(userId, args.titulo, args.descripcion, args.categoria).first()
      return newDecreto

    case 'update_decreto':
      const updates = []
      const bindings = []
      if (args.titulo) {
        updates.push('titulo = ?')
        bindings.push(args.titulo)
      }
      if (args.descripcion) {
        updates.push('descripcion = ?')
        bindings.push(args.descripcion)
      }
      if (updates.length === 0) return { error: 'No hay campos para actualizar' }

      bindings.push(args.decreto_id, userId)
      await db.prepare(`
        UPDATE decretos SET ${updates.join(', ')} WHERE id = ? AND user_id = ?
      `).bind(...bindings).run()
      return { success: true, message: 'Decreto actualizado' }

    case 'delete_decreto':
      await db.prepare(`DELETE FROM decretos WHERE id = ? AND user_id = ?`)
        .bind(args.decreto_id, userId).run()
      return { success: true, message: 'Decreto eliminado' }

    case 'get_agenda_events':
      const events = await db.prepare(`
        SELECT ae.*, d.titulo as decreto_titulo
        FROM agenda_events ae
        LEFT JOIN decretos d ON ae.decreto_id = d.id
        WHERE ae.user_id = ? AND ae.fecha BETWEEN ? AND ?
        ORDER BY ae.fecha, ae.hora
      `).bind(userId, args.start_date, args.end_date).all()
      return events.results

    case 'create_agenda_event':
      const newEvent = await db.prepare(`
        INSERT INTO agenda_events (user_id, decreto_id, titulo, descripcion, fecha, hora, tipo, created_at)
        VALUES (?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
        RETURNING *
      `).bind(
        userId,
        args.decreto_id || null,
        args.titulo,
        args.descripcion || '',
        args.fecha,
        args.hora,
        args.tipo
      ).first()
      return newEvent

    case 'delete_agenda_event':
      await db.prepare(`DELETE FROM agenda_events WHERE id = ? AND user_id = ?`)
        .bind(args.event_id, userId).run()
      return { success: true, message: 'Evento eliminado' }

    case 'register_faith_checkin':
      const checkin = await db.prepare(`
        INSERT INTO faith_checkins (user_id, decreto_id, faith_level, notes, check_in_time, created_at)
        VALUES (?, ?, ?, ?, '10am', CURRENT_TIMESTAMP)
        RETURNING *
      `).bind(userId, args.decreto_id, args.faith_level, args.notes || '').first()

      // Actualizar faith_level del decreto
      await db.prepare(`UPDATE decretos SET faith_level = ? WHERE id = ?`)
        .bind(args.faith_level, args.decreto_id).run()

      return checkin

    case 'record_signal':
      const signal = await db.prepare(`
        INSERT INTO signals (user_id, decreto_id, description, signal_type, emotional_impact, created_at)
        VALUES (?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
        RETURNING *
      `).bind(
        userId,
        args.decreto_id,
        args.description,
        args.signal_type,
        args.emotional_impact || 5
      ).first()
      return signal

    case 'get_rutina_today':
      const rutina = await db.prepare(`
        SELECT
          dr.*,
          dm.titulo as material_titulo,
          dm.descripcion as material_description,
          dh.titulo as humano_titulo,
          dh.descripcion as humano_description,
          de.titulo as empresarial_titulo,
          de.descripcion as empresarial_description
        FROM daily_rotation dr
        LEFT JOIN decretos dm ON dr.decreto_material_id = dm.id
        LEFT JOIN decretos dh ON dr.decreto_humano_id = dh.id
        LEFT JOIN decretos de ON dr.decreto_empresarial_id = de.id
        WHERE dr.user_id = ? AND dr.date = ?
      `).bind(userId, today).first()

      const completedTasks = await db.prepare(`
        SELECT * FROM daily_tasks WHERE user_id = ? AND date = ?
      `).bind(userId, today).all()

      return {
        rutina,
        completedTasks: completedTasks.results
      }

    default:
      return { error: 'Herramienta no encontrada' }
  }
}

// Ruta para chatear con Helene
chatbotRoutes.post('/chat', async (c) => {
  try {
    const { message, conversationHistory = [] } = await c.req.json()

    if (!message) {
      return c.json({ success: false, error: 'Mensaje requerido' }, 400)
    }

    // Obtener informaci√≥n del usuario si est√° logueado (opcional)
    const userId = c.req.header('X-User-ID') || 'demo-user'
    const isAuthenticated = c.req.header('X-User-ID') !== undefined

    // Construir el historial de conversaci√≥n para Gemini
    let systemPrompt = HELENE_PROMPT || HELENE_PROMPT_FALLBACK

    if (isAuthenticated) {
      systemPrompt += `

HERRAMIENTAS DISPONIBLES:
Tienes acceso a herramientas para ayudar al usuario. Puedes leer sus decretos, crear nuevos, agregar eventos a la agenda, registrar se√±ales, etc.

IMPORTANTE:
- Cuando el usuario te pida informaci√≥n sobre sus decretos, usa get_all_decretos o get_decreto_details
- Si el usuario quiere crear un decreto, aseg√∫rate de que sea ESPEC√çFICO (m√©todo SPEC) y luego usa create_decreto
- Si el usuario menciona una sincronicidad o se√±al, pregunta detalles y usa record_signal
- Si el usuario quiere agregar algo a su agenda, usa create_agenda_event
- Siempre da feedback al usuario sobre lo que hiciste

S√© proactiva y usa las herramientas cuando sea apropiado para ayudar mejor al usuario.`
    }

    const messages = [
      {
        role: 'user',
        content: systemPrompt
      },
      {
        role: 'assistant',
        content: '¬°Hola dear! Soy Helene Hadsell, La Reina de los Concursos. Estoy aqu√≠ para ayudarte a manifestar tus sue√±os usando mi m√©todo SPEC. ¬øQu√© quieres crear en tu vida?'
      },
      ...conversationHistory.map((msg: any) => ({
        role: msg.role,
        content: msg.content
      })),
      {
        role: 'user',
        content: message
      }
    ]

    console.log('ü§ñ Enviando mensaje a Gemini con function calling...')

    const GOOGLE_AI_KEY = (c.env as any).GEMINI_API_KEY || ''

    if (!GOOGLE_AI_KEY) {
      return c.json({
        success: false,
        error: 'API key no configurada'
      }, 500)
    }

    // Convertir herramientas al formato de Gemini (solo si est√° autenticado)
    const geminiTools = isAuthenticated ? [{
      functionDeclarations: HELENE_TOOLS.map(tool => ({
        name: tool.name,
        description: tool.description,
        parameters: tool.parameters
      }))
    }] : undefined

    // Loop de function calling
    let currentMessages = messages
    let finalResponse = ''
    let maxIterations = 5
    let iteration = 0
    const toolCalls: any[] = []

    while (iteration < maxIterations) {
      iteration++

      // Preparar el body de la request
      const requestBody: any = {
        contents: currentMessages.map(msg => ({
          role: msg.role === 'assistant' ? 'model' : 'user',
          parts: [{ text: msg.content }]
        })),
        generationConfig: {
          temperature: 0.9,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 2048,
        },
        safetySettings: [
          {
            category: 'HARM_CATEGORY_HARASSMENT',
            threshold: 'BLOCK_MEDIUM_AND_ABOVE'
          },
          {
            category: 'HARM_CATEGORY_HATE_SPEECH',
            threshold: 'BLOCK_MEDIUM_AND_ABOVE'
          },
          {
            category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
            threshold: 'BLOCK_MEDIUM_AND_ABOVE'
          },
          {
            category: 'HARM_CATEGORY_DANGEROUS_CONTENT',
            threshold: 'BLOCK_MEDIUM_AND_ABOVE'
          }
        ]
      }

      // Solo agregar tools si el usuario est√° autenticado
      if (geminiTools) {
        requestBody.tools = geminiTools
      }

      const response = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=${GOOGLE_AI_KEY}`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(requestBody)
        }
      )

      const data = await response.json()

      if (!response.ok) {
        console.error('‚ùå Error de Gemini:', data)
        return c.json({
          success: false,
          error: 'Error al procesar mensaje con IA',
          details: data
        }, 500)
      }

      const candidate = data.candidates[0]
      const content = candidate.content

      // Verificar si hay function calls
      const functionCalls = content.parts?.filter((part: any) => part.functionCall)

      if (functionCalls && functionCalls.length > 0) {
        console.log(`üîß Helene quiere usar ${functionCalls.length} herramienta(s)`)

        // Ejecutar cada function call
        const toolResponses = []

        for (const fc of functionCalls) {
          const toolName = fc.functionCall.name
          const toolArgs = fc.functionCall.args || {}

          console.log(`   Ejecutando: ${toolName}`, toolArgs)

          try {
            const result = await executeTool(toolName, toolArgs, c.env.DB, userId)
            toolResponses.push({
              functionResponse: {
                name: toolName,
                response: result
              }
            })

            toolCalls.push({
              tool: toolName,
              args: toolArgs,
              result
            })
          } catch (error) {
            console.error(`‚ùå Error ejecutando ${toolName}:`, error)
            toolResponses.push({
              functionResponse: {
                name: toolName,
                response: { error: error instanceof Error ? error.message : 'Error desconocido' }
              }
            })
          }
        }

        // Agregar la respuesta con function calls al historial
        currentMessages.push({
          role: 'assistant',
          content: JSON.stringify(content.parts)
        })

        // Agregar los resultados de las function calls
        currentMessages.push({
          role: 'user',
          content: JSON.stringify(toolResponses)
        })

        // Continuar el loop para que Gemini genere una respuesta con los resultados
        continue
      }

      // Si no hay function calls, extraer la respuesta de texto
      const textPart = content.parts?.find((part: any) => part.text)
      if (textPart) {
        finalResponse = textPart.text
        break
      }

      // Si llegamos aqu√≠ sin respuesta, algo sali√≥ mal
      break
    }

    if (!finalResponse) {
      finalResponse = 'Lo siento dear, tuve un problema procesando tu solicitud. ¬øPodr√≠as intentar de nuevo?'
    }

    console.log('‚úÖ Respuesta de Helene generada con', toolCalls.length, 'acciones ejecutadas')

    // Guardar conversaci√≥n en BD
    await c.env.DB.prepare(`
      INSERT INTO chatbot_conversaciones (user_id, mensaje_usuario, respuesta_helene, created_at)
      VALUES (?, ?, ?, CURRENT_TIMESTAMP)
    `).bind(userId, message, finalResponse).run()

    return c.json({
      success: true,
      data: {
        message: finalResponse,
        conversationHistory: [
          ...conversationHistory,
          { role: 'user', content: message },
          { role: 'assistant', content: finalResponse }
        ],
        toolCalls // Incluir las acciones ejecutadas para debugging
      }
    })

  } catch (error) {
    console.error('‚ùå Error en chatbot:', error)
    return c.json({
      success: false,
      error: 'Error interno del servidor',
      details: error instanceof Error ? error.message : String(error)
    }, 500)
  }
})

// Obtener historial de conversaciones del usuario
chatbotRoutes.get('/history', async (c) => {
  try {
    const userId = c.req.header('X-User-ID')

    if (!userId) {
      return c.json({ success: false, error: 'Usuario no autenticado' }, 401)
    }

    const conversations = await c.env.DB.prepare(`
      SELECT mensaje_usuario, respuesta_helene, created_at
      FROM chatbot_conversaciones
      WHERE user_id = ?
      ORDER BY created_at DESC
      LIMIT 50
    `).bind(userId).all()

    return c.json({
      success: true,
      data: conversations.results
    })

  } catch (error) {
    console.error('‚ùå Error al obtener historial:', error)
    return c.json({ success: false, error: 'Error al obtener historial' }, 500)
  }
})

// Limpiar historial de conversaciones
chatbotRoutes.delete('/history', async (c) => {
  try {
    const userId = c.req.header('X-User-ID')

    if (!userId) {
      return c.json({ success: false, error: 'Usuario no autenticado' }, 401)
    }

    await c.env.DB.prepare(`
      DELETE FROM chatbot_conversaciones
      WHERE user_id = ?
    `).bind(userId).run()

    return c.json({ success: true })

  } catch (error) {
    console.error('‚ùå Error al limpiar historial:', error)
    return c.json({ success: false, error: 'Error al limpiar historial' }, 500)
  }
})
